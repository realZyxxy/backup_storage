
************************************************************
** Backing up https://medium.com/@real.zyxxy/using-access-credentials-in-python-code-securely-7253894fdff4?sk=044bdb23562078cd2494c8aafdeaf5e1 **
************************************************************


# Using Access Credentials In Python Code Securely

## Why, when and how to use access credentials in Python code

# What are access credentials? Why are they needed?

Companies such as OpenAI (ChatGPT) and GitHub, SFTP server providers etc. allow programmatic use of their services using Python or other programming languages. They limit the resources available to a user through API keys, access tokens, passwords and other access credentials to ensure security and avoid abuse.  
In essence, all access credentials are like passwords — they are usually a sequence of 30+ characters, mostly letters and numbers, that need to be kept securely and used in the functions of their module to gain access to the services.

API keys are a very common type of access credentials

# Obtaining your access credentials

Every credentials provider has its specific process. Typically, you set your passwords and other credentials are defined and communicated to you by the provider.

This screenshot shows how you can obtain an OpenAI API key

# Saving credentials to use them in your code

It takes a lot of work to ensure maximal security when using the access credentials with your code — I cannot advise on this matter. A useful list of best practices can be found for example [here](https://www.strac.io/blog/sharing-and-storing-api-keys-securely).

Storing them as **system variables, a.k.a.**[ **environment variables**](https://en.wikipedia.org/wiki/Environment_variable) **, a.k.a. secrets** on your system, and accessing them by the name of the system variable (secret) in your code ensures **a reasonable (for most applications) level of security**. The system variables/secrets setup usually takes no more than 2 minutes. Specifics depend on the system that runs your Python code:

  * [ **Replit**](/@real.zyxxy/get-a-web-based-pro-grade-python-environment-in-5-minutes-at-0-cost-8843f5a07f88) **users:** you need to [set up a secret](https://docs.replit.com/programming-ide/workspace-features/storing-sensitive-information-environment-variables) in every repl project that uses that particular secret. It only takes 2 button clicks and 2 copy-pastes. Don’t forget to press the “Add new secret” button at the end to save your changes.
  *  **Windows users:**[Windows 10 instructions are here](https://docs.oracle.com/en/database/oracle/machine-learning/oml4r/1.5.1/oread/creating-and-modifying-environment-variables-on-windows.html#GUID-DD6F9982-60D5-48F6-8270-A27EC53807D0), and [Windows 11 instructions are here](https://www.alphr.com/set-environment-variables-windows-11/).
  *  **MacOS users:** to set up a permanent system variable, you need to edit either ~/.zshenv file (MacOS 10.5 or later) or ~/.bash-profile file (previous versions of MacOS). Instructions can be found [here](https://tecadmin.net/setting-up-the-environment-variables-in-macos/).



# Using credentials in Python code

Storing your credentials in plain text in your programming code is strongly discouraged: your account could be compromised and/or your credentials may be disabled.

You can use access environment variables/secrets that store your credentials in your Python code using command`[os.environ](https://docs.python.org/3/library/os.html#os.environ)` and `[os.getenv](https://docs.python.org/3/library/os.html#os.getenv)` defined in `[module os](https://docs.python.org/3/library/os.html)` as shown below:
    
    
    import os  
      
    # Suppose you are using an abc module,   
    # and the name of your system variable (secret) that stores   
    # access credential value is abc_secret. You could use it like this:  
    abc_response = abc_function(os.environ['abc_secret'], other_abc_arguments)  
    # or like this:  
    abc_secret_value = os.getenv(key='abc_secret', default=None)  
    if abc_secret_value is None:  
      do_whats_needed_when_you_cannot_access_abc_module()  
    else:  
      abc_response = abc_function(abc_secret_value, other_abc_arguments)  
      
    # ABSOLUTELY NEVER EVER do anything like   
    # print(os.environ['abc_secret'])  
    # in a publicly accessible code because it will reveal your credentials.  
    # Only use them in the access functions of the module they are needed for.

If you need to practice using the system variables (secrets), create a special dummy system variable and set it to a dummy value. Only use them in the access functions of the module they are provided for.

Never add API key values to your code in plain text

**************
** Pictures **
**************
1. Never add API key values to your code in plain text : ['1*BsmWblstwB4tMsI_89zKEw.jpeg', '1*M9iXQ_8PHn7vS3SGKBul4g.jpeg', '1*JYrsb_vt8Nu3kpmhBfFEAA.jpeg']
